{"ast":null,"code":"var _jsxFileName = \"/Users/rithikbansal/Desktop/Northeastern/Courses/CS5170/Mini Projects/4/frontend/src/TextSummarizer.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TextSummarizer() {\n  _s();\n  const [text, setText] = useState(\"\");\n  const [summary, setSummary] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [highlightedWord, setHighlightedWord] = useState(\"\");\n  const handleSummarize = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.post(\"http://127.0.0.1:5001/summarize\", {\n        text\n      });\n      setSummary(response.data.summary);\n    } catch (error) {\n      console.error(\"Error summarizing text:\", error.response || error.message);\n      setSummary(\"Error summarizing text.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSpeak = () => {\n    if (summary) {\n      const utterance = new SpeechSynthesisUtterance(summary);\n      utterance.onstart = () => setIsSpeaking(true);\n      utterance.onend = () => setIsSpeaking(false);\n      utterance.onboundary = event => {\n        setHighlightedWord(event.char);\n      };\n      window.speechSynthesis.speak(utterance);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Enter Text for Summarization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"Enter text to summarize\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      rows: \"6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSummarize,\n      disabled: loading || !text,\n      children: loading ? \"Summarizing...\" : \"Summarize\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), summary && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"output-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Summary:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: summary.split(\" \").map((word, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: word === highlightedWord ? \"highlight\" : \"\",\n          children: [word, \" \"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSpeak,\n        disabled: isSpeaking,\n        children: isSpeaking ? \"Speaking...\" : \"Speak\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(TextSummarizer, \"ODTxB0K6jHIJdDiXqrGekydhCwU=\");\n_c = TextSummarizer;\nexport default TextSummarizer;\nvar _c;\n$RefreshReg$(_c, \"TextSummarizer\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","TextSummarizer","_s","text","setText","summary","setSummary","loading","setLoading","isSpeaking","setIsSpeaking","highlightedWord","setHighlightedWord","handleSummarize","response","post","data","error","console","message","handleSpeak","utterance","SpeechSynthesisUtterance","onstart","onend","onboundary","event","char","window","speechSynthesis","speak","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","rows","onClick","disabled","split","map","word","index","_c","$RefreshReg$"],"sources":["/Users/rithikbansal/Desktop/Northeastern/Courses/CS5170/Mini Projects/4/frontend/src/TextSummarizer.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './styles.css';\n\nfunction TextSummarizer() {\n    const [text, setText] = useState(\"\");\n    const [summary, setSummary] = useState(\"\");\n    const [loading, setLoading] = useState(false);\n    const [isSpeaking, setIsSpeaking] = useState(false);\n    const [highlightedWord, setHighlightedWord] = useState(\"\");\n\n    const handleSummarize = async () => {\n        setLoading(true);\n        try {\n            const response = await axios.post(\"http://127.0.0.1:5001/summarize\", { text });\n            setSummary(response.data.summary);\n        } catch (error) {\n            console.error(\"Error summarizing text:\", error.response || error.message);\n            setSummary(\"Error summarizing text.\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleSpeak = () => {\n        if (summary) {\n            const utterance = new SpeechSynthesisUtterance(summary);\n            utterance.onstart = () => setIsSpeaking(true);\n            utterance.onend = () => setIsSpeaking(false);\n            utterance.onboundary = (event) => {\n                setHighlightedWord(event.char);\n            };\n\n            window.speechSynthesis.speak(utterance);\n        }\n    };\n\n\n    return (\n        <div className=\"container\">\n            <h3>Enter Text for Summarization</h3>\n            <textarea\n                placeholder=\"Enter text to summarize\"\n                value={text}\n                onChange={(e) => setText(e.target.value)}\n                rows=\"6\"\n            ></textarea>\n            <button onClick={handleSummarize} disabled={loading || !text}>\n                {loading ? \"Summarizing...\" : \"Summarize\"}\n            </button>\n\n            {summary && (\n                <div className=\"output-box\">\n                    <h4>Summary:</h4>\n                    {/* Split summary into words and highlight the spoken word */}\n                    <p>\n                        {summary.split(\" \").map((word, index) => (\n                            <span\n                                key={index}\n                                className={word === highlightedWord ? \"highlight\" : \"\"}\n                            >\n                                {word}{\" \"}\n                            </span>\n                        ))}\n                    </p>\n\n                    {/* Speak button */}\n                    <button onClick={handleSpeak} disabled={isSpeaking}>\n                        {isSpeaking ? \"Speaking...\" : \"Speak\"}\n                    </button>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default TextSummarizer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACc,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAE1D,MAAMgB,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChCL,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACA,MAAMM,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAAC,iCAAiC,EAAE;QAAEZ;MAAK,CAAC,CAAC;MAC9EG,UAAU,CAACQ,QAAQ,CAACE,IAAI,CAACX,OAAO,CAAC;IACrC,CAAC,CAAC,OAAOY,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAACH,QAAQ,IAAIG,KAAK,CAACE,OAAO,CAAC;MACzEb,UAAU,CAAC,yBAAyB,CAAC;IACzC,CAAC,SAAS;MACNE,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;EAED,MAAMY,WAAW,GAAGA,CAAA,KAAM;IACtB,IAAIf,OAAO,EAAE;MACT,MAAMgB,SAAS,GAAG,IAAIC,wBAAwB,CAACjB,OAAO,CAAC;MACvDgB,SAAS,CAACE,OAAO,GAAG,MAAMb,aAAa,CAAC,IAAI,CAAC;MAC7CW,SAAS,CAACG,KAAK,GAAG,MAAMd,aAAa,CAAC,KAAK,CAAC;MAC5CW,SAAS,CAACI,UAAU,GAAIC,KAAK,IAAK;QAC9Bd,kBAAkB,CAACc,KAAK,CAACC,IAAI,CAAC;MAClC,CAAC;MAEDC,MAAM,CAACC,eAAe,CAACC,KAAK,CAACT,SAAS,CAAC;IAC3C;EACJ,CAAC;EAGD,oBACIrB,OAAA;IAAK+B,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACtBhC,OAAA;MAAAgC,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrCpC,OAAA;MACIqC,WAAW,EAAC,yBAAyB;MACrCC,KAAK,EAAEnC,IAAK;MACZoC,QAAQ,EAAGC,CAAC,IAAKpC,OAAO,CAACoC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MACzCI,IAAI,EAAC;IAAG;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACZpC,OAAA;MAAQ2C,OAAO,EAAE9B,eAAgB;MAAC+B,QAAQ,EAAErC,OAAO,IAAI,CAACJ,IAAK;MAAA6B,QAAA,EACxDzB,OAAO,GAAG,gBAAgB,GAAG;IAAW;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC,EAER/B,OAAO,iBACJL,OAAA;MAAK+B,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACvBhC,OAAA;QAAAgC,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAEjBpC,OAAA;QAAAgC,QAAA,EACK3B,OAAO,CAACwC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAChChD,OAAA;UAEI+B,SAAS,EAAEgB,IAAI,KAAKpC,eAAe,GAAG,WAAW,GAAG,EAAG;UAAAqB,QAAA,GAEtDe,IAAI,EAAE,GAAG;QAAA,GAHLC,KAAK;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIR,CACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAGJpC,OAAA;QAAQ2C,OAAO,EAAEvB,WAAY;QAACwB,QAAQ,EAAEnC,UAAW;QAAAuB,QAAA,EAC9CvB,UAAU,GAAG,aAAa,GAAG;MAAO;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAAClC,EAAA,CAtEQD,cAAc;AAAAgD,EAAA,GAAdhD,cAAc;AAwEvB,eAAeA,cAAc;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}